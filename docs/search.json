[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "A quarto book for technical documentations",
    "section": "",
    "text": "1 Introduction\nWelcome to my very first Quarto wiki!",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "index.html#what-is-this-wiki-for",
    "href": "index.html#what-is-this-wiki-for",
    "title": "A quarto book for technical documentations",
    "section": "1.1 What is this wiki for?",
    "text": "1.1 What is this wiki for?\nThis wiki has been created exclusively for the purpose of thoroughly testing and exploring the various functionalities and features that Quarto‚Äôs wiki platform offers.",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "index.html#what-can-i-do-in-a-quarto-wiki",
    "href": "index.html#what-can-i-do-in-a-quarto-wiki",
    "title": "A quarto book for technical documentations",
    "section": "1.2 What can I do in a Quarto Wiki?",
    "text": "1.2 What can I do in a Quarto Wiki?\nA Quarto Wiki is a powerful tool that you can use to enhance your project‚Äôs documentation and collaboration. Here are some of the key features and actions you can perform in a Quarto Wiki:\n\nCreate and Organize Pages: You can create multiple pages to document different aspects of your project, such as installation guides, API documentation, tutorials, and FAQs. Arrange pages in a hierarchical structure with nested pages, or use a table of contents to provide easy navigation.\nWrite and Format Content: Quarto Wikis support Markdown, allowing you to format text with headers, lists, links, images, code blocks, and more. For more advanced formatting, you can also use HTML.\nCollaborate with Others: Multiple collaborators can edit wiki pages to contribute to the documentation. Track changes made to the wiki pages, view revision history, and revert to previous versions if necessary.\nEmbed Media and Code: Embed images and videos to enhance the documentation visually. Include code snippets with syntax highlighting for various programming languages.\nLink to Other Resources: Internal Links: Link to other pages within the wiki for better navigation. External Links: Link to external resources such as websites, other repositories, or documentation.\nSearch and Navigation: Use the search functionality to find specific content within the wiki quickly. Customize the sidebar and footer to provide links to important pages and resources.\nAccess Control: Public and Private Wikis: Depending on the repository settings, the wiki can be public for anyone to view or private, accessible only to repository collaborators. Permissions: Control who can edit the wiki pages by managing repository permissions.\nGit Integration: Clone and Push: Clone the wiki repository to your local machine, make changes locally, and push updates back to GitHub. This allows for more advanced editing using local tools and version control.\nProject Management: Documentation for Projects: Use the wiki to document the project‚Äôs development process, including roadmaps, milestones, and task lists.",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "index.html#examples-of-usage",
    "href": "index.html#examples-of-usage",
    "title": "A quarto book for technical documentations",
    "section": "1.3 Examples of Usage",
    "text": "1.3 Examples of Usage\n\nProject Documentation: Comprehensive guides and references for using and contributing to the project.\nAPI Documentation: Detailed information on API endpoints, parameters, and examples.\nTutorials and How-Tos: Step-by-step instructions for common tasks and workflows.\nDeveloper Guides: Documentation for developers to understand the codebase and contribute effectively.\nUser Manuals: Instructions for end-users on how to install, configure, and use the software.\n\nBy leveraging these features, a GitHub Wiki can significantly enhance the quality and accessibility of your project‚Äôs documentation, making it easier for contributors and users to understand and engage with your project.",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "demo.html",
    "href": "demo.html",
    "title": "2¬† Some demonstration of quarto books",
    "section": "",
    "text": "2.1 First, a little markdown guide\nHello and welcome! Markdown is a lightweight markup language with plain-text formatting syntax. It can be converted into HTML and other formats. Here‚Äôs a quick demonstration of common markdown features.\nYou can make text bold by wrapping it with two asterisks or underscores. Italics are just as easy! Wrap text with one asterisk or underscore: Italic Text.",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Some demonstration of quarto books</span>"
    ]
  },
  {
    "objectID": "demo.html#first-a-little-markdown-guide",
    "href": "demo.html#first-a-little-markdown-guide",
    "title": "2¬† Some demonstration of quarto books",
    "section": "",
    "text": "2.1.1 Lists\nCreating lists is straightforward. There are unordered lists‚Ä¶\n\nUnordered list item 1\nUnordered list item 2\n\nSubitem 2.1\nSubitem 2.2\n\n\n‚Ä¶and then there are ordered lists:\n\nA first item\nA second item\nAnd a last item\n\n\n\n2.1.2 Headers\nHeaders from H1 to H6 are essential for structure. They‚Äôre made with #:\n# H1 Header\n## H2 Header\n### H3 Header\n\n\n2.1.3 Links and Images\nAdding a link is as simple as wrapping text in brackets followed by the URL in parentheses. To add an image, it‚Äôs very similar but starts with an exclamation:\n\n\n\n\n\n\nFigure¬†2.1: This is an image of some agricultural activity in coorporate design.\n\n\n\n\n\n2.1.4 Quotes and Code\nQuotes are also a default part of the markdown syntax.\n\nThis is a blockquote. Use it to highlight important sections.\n\nAnd so is code. For inline code, use single backticks: Inline code here For longer code, use triple backticks:\ndef hello_world():\n    print(\"Hello, world!\")\n\n\n2.1.5 Emojis\nTo insert emojis, simply type :heart:. Use whatever name the emoji has and it will be rendered correspondingly ‚ù§Ô∏è Here, I want to write something else. So that I am üòÑ!",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Some demonstration of quarto books</span>"
    ]
  },
  {
    "objectID": "demo.html#tables",
    "href": "demo.html#tables",
    "title": "2¬† Some demonstration of quarto books",
    "section": "2.2 Tables",
    "text": "2.2 Tables\nHere‚Äôs an example of a markdown table using pipe syntax, representing a list of programming languages and their respective release years:\n\n\n\nTable¬†2.1: We can add a table caption. And a reference.\n\n\n\n\n\nProgramming Language\nRelease Year\nCreator\n\n\n\n\nPython\n1991\nGuido van Rossum\n\n\nJavaScript\n1995\nBrendan Eich\n\n\nJava\n1995\nJames Gosling\n\n\nC++\n1985\nBjarne Stroustrup\n\n\nRuby\n1995\nYukihiro Matsumoto\n\n\nSwift\n2014\nApple Inc.\n\n\nGo\n2009\nRobert Griesemer et al\n\n\n\n\n\n\nFeel free to use or modify Table¬†2.1 as needed!",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Some demonstration of quarto books</span>"
    ]
  },
  {
    "objectID": "demo.html#mermaid-diagrams",
    "href": "demo.html#mermaid-diagrams",
    "title": "2¬† Some demonstration of quarto books",
    "section": "2.3 Mermaid diagrams",
    "text": "2.3 Mermaid diagrams\nThis diagram visualizes the fundamental structure of the product catalog without the junction tables, i.e.¬†containing many-to-many relationships.\n\n\n\n\n\n\nerDiagram\n  CUSTOMER ||--o{ ORDER : places\n  ORDER ||--|{ LINE-ITEM : contains\n  PRODUCT ||--|{ LINE-ITEM : includes\n  CUSTOMER {\n    string id\n    string name\n    string email\n    string phone\n  }\n  ORDER {\n    string id\n    string date\n    string status\n  }\n  LINE-ITEM {\n    string id\n    int quantity\n    decimal price\n  }\n  PRODUCT {\n    string id\n    string name\n    string description\n  }\n\n\n\n\nFigure¬†2.2: Example of a simple entity relationship diagram using Mermaid JS.\n\n\n\n\n\nHere‚Äôs a simple example of a sequence diagram using Mermaid JS. This diagram will illustrate a sequence of interactions between two actors, System A and System B, with a message exchange:\n\n\n\n\n\n\nsequenceDiagram\n    participant SystemA\n    participant SystemB\n    \n    SystemA -&gt;&gt; SystemB: Message 1\n    SystemB --&gt;&gt; SystemA: Response 1\n    SystemA -&gt;&gt; SystemB: Message 2\n    SystemB --&gt;&gt; SystemA: Response 2\n\n\n\n\nFigure¬†2.3: Example of a simple sequence diagram using Mermaid JS.\n\n\n\n\n\nIn this sequence diagram: - SystemA and SystemB are the participants (systems) involved in the sequence of interactions. - SystemA -&gt;&gt; SystemB: Message denotes a message sent from SystemA to SystemB. - SystemB --&gt;&gt; SystemA: Response denotes a response message sent from SystemB back to SystemA.\nThis example shows a simple sequence where SystemA sends two messages (Message 1 and Message 2) to SystemB, and SystemB responds with Response 1 and Response 2 respectively.",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Some demonstration of quarto books</span>"
    ]
  },
  {
    "objectID": "demo.html#code-files",
    "href": "demo.html#code-files",
    "title": "2¬† Some demonstration of quarto books",
    "section": "2.4 Code files",
    "text": "2.4 Code files\nBelow is a simple demo Python code that demonstrates a basic program to calculate the factorial of a number using both iterative and recursive methods:\n\n\nfactorial.py\n\ndef factorial_iterative(n):\n    \"\"\"Calculate factorial of a number iteratively.\"\"\"\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n\ndef factorial_recursive(n):\n    \"\"\"Calculate factorial of a number recursively.\"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial_recursive(n - 1)\n\n# Input: Number for which factorial is to be calculated\nnumber = 5\n\n# Calculate factorial using iterative method\niterative_result = factorial_iterative(number)\nprint(f\"Factorial of {number} (iterative): {iterative_result}\")\n\n# Calculate factorial using recursive method\nrecursive_result = factorial_recursive(number)\nprint(f\"Factorial of {number} (recursive): {recursive_result}\")\n\nHere‚Äôs an explanation for the code above.\n\nIterative Method (factorial_iterative):\n\nInitializes result to 1.\nLoops from 1 to n, multiplying result by the loop counter i in each iteration.\nReturns the final result.\n\nRecursive Method (factorial_recursive):\n\nIf n is 0, returns 1 (base case).\nOtherwise, returns n multiplied by the factorial of n-1.\n\nMain Program:\n\nDefines a variable number to hold the value for which the factorial is to be calculated.\nCalls the iterative and recursive factorial functions and prints the results.\n\n\nYou can run this code in any Python environment to see the output for the factorial of 5 using both methods.",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Some demonstration of quarto books</span>"
    ]
  },
  {
    "objectID": "last.html",
    "href": "last.html",
    "title": "3¬† A last page",
    "section": "",
    "text": "Aaand that‚Äôs it. This is the last page of this wiki.",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>A last page</span>"
    ]
  }
]