---
title: Some demonstration of quarto books
mermaid: 
  theme: neutral
---

## Emojis

To insert emojis, simply type `:heart:`. Use whatever name the emoji has and it will be rendered correspondingly ❤️

Here, I want to write something else. So that I am 😄!

And of course, images can be embedded effertlessly, as well.

![](agriculture.png)

## Numbering

We can number items nicely.

1. This is one item.
2. This is another item.
3. This is a third item.
4. And that is the last item.

## Tables

Here's an example of a markdown table using pipe syntax, representing a list of programming languages and their respective release years:

| Programming Language | Release Year | Creator                |
|----------------------|--------------|------------------------|
| Python               | 1991         | Guido van Rossum       |
| JavaScript           | 1995         | Brendan Eich           |
| Java                 | 1995         | James Gosling          |
| C++                  | 1985         | Bjarne Stroustrup      |
| Ruby                 | 1995         | Yukihiro Matsumoto     |
| Swift                | 2014         | Apple Inc.             |
| Go                   | 2009         | Robert Griesemer et al |

: We can add a table caption. And a reference. {#tbl-table}

Feel free to use or modify @tbl-table as needed!

## Mermaid diagrams

This diagram visualizes the fundamental structure of the product catalog without the junction tables, i.e. containing many-to-many relationships.

```{mermaid}
erDiagram
  CUSTOMER ||--o{ ORDER : places
  ORDER ||--|{ LINE-ITEM : contains
  PRODUCT ||--|{ LINE-ITEM : includes
  CUSTOMER {
    string id
    string name
    string email
    string phone
  }
  ORDER {
    string id
    string date
    string status
  }
  LINE-ITEM {
    string id
    int quantity
    decimal price
  }
  PRODUCT {
    string id
    string name
    string description
  }
```

Here's a simple example of a sequence diagram using Mermaid JS. This diagram will illustrate a sequence of interactions between two actors, `System A` and `System B`, with a message exchange:

```mermaid
sequenceDiagram
    participant SystemA
    participant SystemB
    
    SystemA ->> SystemB: Message 1
    SystemB -->> SystemA: Response 1
    SystemA ->> SystemB: Message 2
    SystemB -->> SystemA: Response 2
```

In this sequence diagram:
- `SystemA` and `SystemB` are the participants (systems) involved in the sequence of interactions.
- `SystemA ->> SystemB: Message` denotes a message sent from `SystemA` to `SystemB`.
- `SystemB -->> SystemA: Response` denotes a response message sent from `SystemB` back to `SystemA`.

This example shows a simple sequence where `SystemA` sends two messages (`Message 1` and `Message 2`) to `SystemB`, and `SystemB` responds with `Response 1` and `Response 2` respectively.

## Code blocks

Below is a simple demo Python code that demonstrates a basic program to calculate the factorial of a number using both iterative and recursive methods:

```{.python filename="factorial.py"}
def factorial_iterative(n):
    """Calculate factorial of a number iteratively."""
    result = 1
    for i in range(1, n + 1):
        result *= i
    return result

def factorial_recursive(n):
    """Calculate factorial of a number recursively."""
    if n == 0:
        return 1
    else:
        return n * factorial_recursive(n - 1)

# Input: Number for which factorial is to be calculated
number = 5

# Calculate factorial using iterative method
iterative_result = factorial_iterative(number)
print(f"Factorial of {number} (iterative): {iterative_result}")

# Calculate factorial using recursive method
recursive_result = factorial_recursive(number)
print(f"Factorial of {number} (recursive): {recursive_result}")
```

Here's an explanation for the code above.

- **Iterative Method (`factorial_iterative`)**:
  - Initializes `result` to 1.
  - Loops from 1 to `n`, multiplying `result` by the loop counter `i` in each iteration.
  - Returns the final `result`.

- **Recursive Method (`factorial_recursive`)**:
  - If `n` is 0, returns 1 (base case).
  - Otherwise, returns `n` multiplied by the factorial of `n-1`.

- **Main Program**:
  - Defines a variable `number` to hold the value for which the factorial is to be calculated.
  - Calls the iterative and recursive factorial functions and prints the results.

You can run this code in any Python environment to see the output for the factorial of 5 using both methods.